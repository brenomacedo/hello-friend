// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TEST")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
    id Int @default(autoincrement()) @id
    type String @db.VarChar(255)
    name String @db.VarChar(255)
    email String? @db.VarChar(255) @unique
    password String? @db.VarChar(255)
    avatar String? @db.VarChar(255)
    title String? @db.VarChar(20)
    about String? @db.VarChar(255)
    facebook String? @db.VarChar(255)
    instagram String? @db.VarChar(255)
    twitter String? @db.VarChar(255)
    githubId Int?

    resetPasswordToken String? @db.VarChar(255)
    resetPasswordTokenExpires DateTime?

    posts Post[]
    categories CategoriesOnUser[]
    comments Comment[]
    responses Response[]
}

model Category {
    id Int @default(autoincrement()) @id
    name String @db.VarChar(255)

    users CategoriesOnUser[]
    posts Post[]
}

model CategoriesOnUser {
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId Int

    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId Int

    createdAt DateTime @default(now())

    @@id([userId, categoryId])
}

model Post {
    id Int @default(autoincrement()) @id
    description String @db.Text
    imageUrl String? @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId Int

    comments Comment[]
}

model Comment {
    id Int @default(autoincrement()) @id
    content String @db.Text

    author User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId Int

    post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    postId Int

    responses Response[]
}

model Response {
    id Int @default(autoincrement()) @id
    content String @db.Text

    author User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId Int

    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    commentId Int
}
